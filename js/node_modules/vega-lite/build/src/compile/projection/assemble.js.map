{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/projection/assemble.ts"],"names":[],"mappings":";AACA,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AACpC,OAAO,EAAC,WAAW,EAAe,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAQ,MAAM,UAAU,CAAC;AAE3E,MAAM,UAAU,mBAAmB,CAAC,KAAY;IAC9C,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACvE,OAAO,sCAAsC,CAAC,KAAK,CAAC,CAAC;KACtD;SAAM;QACL,OAAO,0BAA0B,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;AAED,MAAM,UAAU,sCAAsC,CAAC,KAAY;IACjE,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE;QAClD,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACzD,CAAC,EAAE,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,KAAY;IACrD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;IAC7C,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IAED,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;IACvC,MAAM,EAAC,IAAI,KAAa,UAAU,EAArB,2CAAqB,CAAC,CAAC,iGAAiG;IAErI,MAAM,IAAI,GAAc;QACtB,MAAM,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;KAChE,CAAC;IAEF,MAAM,GAAG,GAAa,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;QAC5D,MAAM,MAAM,GAAW,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;QACnG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAC9B,iCAAiC;YACjC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IAED,OAAO;wBAEH,IAAI;YACJ,IAAI,EACJ,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACxD,IACE,IAAI;KAEV,CAAC;AACJ,CAAC","sourcesContent":["import {SignalRef} from 'vega';\nimport {contains} from '../../util';\nimport {isSignalRef, VgProjection} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\n\nexport function assembleProjections(model: Model): VgProjection[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    return assembleProjectionsForModelAndChildren(model);\n  } else {\n    return assembleProjectionForModel(model);\n  }\n}\n\nexport function assembleProjectionsForModelAndChildren(model: Model): VgProjection[] {\n  return model.children.reduce((projections, child) => {\n    return projections.concat(child.assembleProjections());\n  }, assembleProjectionForModel(model));\n}\n\nexport function assembleProjectionForModel(model: Model): VgProjection[] {\n  const component = model.component.projection;\n  if (!component || component.merged) {\n    return [];\n  }\n\n  const projection = component.combine();\n  const {name, ...rest} = projection; // we need to extract name so that it is always present in the output and pass TS type validation\n\n  const size: SignalRef = {\n    signal: `[${component.size.map(ref => ref.signal).join(', ')}]`\n  };\n\n  const fit: string[] = component.data.reduce((sources, data) => {\n    const source: string = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n    if (!contains(sources, source)) {\n      // build a unique list of sources\n      sources.push(source);\n    }\n    return sources;\n  }, []);\n\n  if (fit.length <= 0) {\n    throw new Error(\"Projection's fit didn't find any data sources\");\n  }\n\n  return [\n    {\n      name,\n      size,\n      fit: {\n        signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n      },\n      ...rest\n    }\n  ];\n}\n"]}