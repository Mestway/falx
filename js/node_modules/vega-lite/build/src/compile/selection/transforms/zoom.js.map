{"version":3,"file":"zoom.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/zoom.ts"],"names":[],"mappings":"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","sourcesContent":["import {NewSignal} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {stringValue} from 'vega-util';\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {UnitModel} from '../../unit';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {channelSignalName, positionalProjections, SelectionComponent} from '../selection';\nimport {default as scalesCompiler, domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\nconst ANCHOR = '_zoom_anchor';\nconst DELTA = '_zoom_delta';\n\nconst zoom: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.zoom;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const delta = name + DELTA;\n    const {x, y} = positionalProjections(selCmpt);\n    const sx = stringValue(model.scaleName(X));\n    const sy = stringValue(model.scaleName(Y));\n    let events = parseSelector(selCmpt.zoom, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => ((e.markname = name + INTERVAL_BRUSH), e));\n    }\n\n    signals.push(\n      {\n        name: name + ANCHOR,\n        on: [\n          {\n            events: events,\n            update: !hasScales\n              ? `{x: x(unit), y: y(unit)}`\n              : '{' +\n                [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']\n                  .filter(expr => !!expr)\n                  .join(', ') +\n                '}'\n          }\n        ]\n      },\n      {\n        name: delta,\n        on: [\n          {\n            events: events,\n            force: true,\n            update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n          }\n        ]\n      }\n    );\n\n    if (x !== null) {\n      onDelta(model, selCmpt, 'x', 'width', signals);\n    }\n\n    if (y !== null) {\n      onDelta(model, selCmpt, 'y', 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default zoom;\n\nfunction onDelta(\n  model: UnitModel,\n  selCmpt: SelectionComponent,\n  channel: ScaleChannel,\n  size: 'width' | 'height',\n  signals: NewSignal[]\n) {\n  const name = selCmpt.name;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => {\n    return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n  })[0];\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const base = hasScales ? domain(model, channel) : signal.name;\n  const delta = name + DELTA;\n  const anchor = `${name}${ANCHOR}.${channel}`;\n  const zoomFn = !hasScales\n    ? 'zoomLinear'\n    : scaleType === 'log'\n    ? 'zoomLog'\n    : scaleType === 'pow'\n    ? 'zoomPow'\n    : 'zoomLinear';\n  const update =\n    `${zoomFn}(${base}, ${anchor}, ${delta}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n    ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n"]}