{"version":3,"file":"scales.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/scales.ts"],"names":[],"mappings":"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","sourcesContent":["import {stringValue} from 'vega-util';\nimport {Channel, isScaleChannel, X, Y} from '../../../channel';\nimport * as log from '../../../log';\nimport {hasContinuousDomain, isBinScale} from '../../../scale';\nimport {accessPathWithDatum, varName} from '../../../util';\nimport {UnitModel} from '../../unit';\nimport {channelSignalName, VL_SELECTION_RESOLVE} from '../selection';\nimport {TransformCompiler} from './transforms';\n\nconst scaleBindings: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n  },\n\n  parse: (model, selDef, selCmpt) => {\n    const name = varName(selCmpt.name);\n    const bound: Channel[] = (selCmpt.scales = []);\n\n    for (const p of selCmpt.project) {\n      const channel = p.channel;\n\n      if (!isScaleChannel(channel)) {\n        continue;\n      }\n\n      const scale = model.getScaleComponent(channel);\n      const scaleType = scale ? scale.get('type') : undefined;\n\n      if (!scale || !hasContinuousDomain(scaleType) || isBinScale(scaleType)) {\n        log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n        continue;\n      }\n\n      scale.set('domainRaw', {signal: accessPathWithDatum(p.field, name)}, true);\n      bound.push(channel);\n\n      // Bind both x/y for diag plot of repeated views.\n      if (model.repeater && model.repeater.row === model.repeater.column) {\n        const scale2 = model.getScaleComponent(channel === X ? Y : X);\n        scale2.set('domainRaw', {signal: accessPathWithDatum(p.field, name)}, true);\n      }\n    }\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const channelSignals = selCmpt.scales\n      .filter(channel => {\n        return !signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data')).length;\n      })\n      .map(channel => {\n        return {channel, signal: channelSignalName(selCmpt, channel, 'data')};\n      });\n\n    // Top-level signals are only needed for multiview displays and if this\n    // view's top-level signals haven't already been generated.\n    if (!model.parent || !channelSignals.length) {\n      return signals;\n    }\n\n    // vlSelectionResolve does not account for the behavior of bound scales in\n    // multiview displays. Each unit view adds a tuple to the store, but the\n    // state of the selection is the unit selection most recently updated. This\n    // state is captured by the top-level signals that we insert and \"push\n    // outer\" to from within the units. We need to reassemble this state into\n    // the top-level named signal, except no single selCmpt has a global view.\n    const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n    const update = namedSg.update;\n    if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n      namedSg.update =\n        '{' + channelSignals.map(cs => `${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`).join(', ') + '}';\n    } else {\n      for (const cs of channelSignals) {\n        const mapping = `, ${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`;\n        if (update.indexOf(mapping) < 0) {\n          namedSg.update = update.substring(0, update.length - 1) + mapping + '}';\n        }\n      }\n    }\n\n    return signals.concat(channelSignals.map(cs => ({name: cs.signal})));\n  },\n\n  signals: (model, selCmpt, signals) => {\n    // Nested signals need only push to top-level signals with multiview displays.\n    if (model.parent) {\n      for (const channel of selCmpt.scales) {\n        const signal: any = signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data'))[0];\n\n        // convert to PushSignal\n        signal.push = 'outer';\n        delete signal.value;\n        delete signal.update;\n      }\n    }\n\n    return signals;\n  }\n};\n\nexport default scaleBindings;\n\nexport function domain(model: UnitModel, channel: Channel) {\n  const scale = stringValue(model.scaleName(channel));\n  return `domain(${scale})`;\n}\n"]}