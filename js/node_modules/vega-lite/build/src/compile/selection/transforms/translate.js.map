{"version":3,"file":"translate.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/translate.ts"],"names":[],"mappings":"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","sourcesContent":["import {NewSignal} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {UnitModel} from '../../unit';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {channelSignalName, positionalProjections, SelectionComponent} from '../selection';\nimport scalesCompiler, {domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\n\nconst translate: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const anchor = name + ANCHOR;\n    const {x, y} = positionalProjections(selCmpt);\n    let events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n    }\n\n    signals.push(\n      {\n        name: anchor,\n        value: {},\n        on: [\n          {\n            events: events.map(e => e.between[0]),\n            update:\n              '{x: x(unit), y: y(unit)' +\n              (x !== null\n                ? ', extent_x: ' +\n                  (hasScales ? domain(model, X) : `slice(${channelSignalName(selCmpt, 'x', 'visual')})`)\n                : '') +\n              (y !== null\n                ? ', extent_y: ' +\n                  (hasScales ? domain(model, Y) : `slice(${channelSignalName(selCmpt, 'y', 'visual')})`)\n                : '') +\n              '}'\n          }\n        ]\n      },\n      {\n        name: name + DELTA,\n        value: {},\n        on: [\n          {\n            events: events,\n            update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n          }\n        ]\n      }\n    );\n\n    if (x !== null) {\n      onDelta(model, selCmpt, X, 'width', signals);\n    }\n\n    if (y !== null) {\n      onDelta(model, selCmpt, Y, 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default translate;\n\nfunction onDelta(\n  model: UnitModel,\n  selCmpt: SelectionComponent,\n  channel: ScaleChannel,\n  size: 'width' | 'height',\n  signals: NewSignal[]\n) {\n  const name = selCmpt.name;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => {\n    return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n  })[0];\n  const anchor = name + ANCHOR;\n  const delta = name + DELTA;\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n  const extent = `${anchor}.extent_${channel}`;\n  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n  const panFn = !hasScales\n    ? 'panLinear'\n    : scaleType === 'log'\n    ? 'panLog'\n    : scaleType === 'pow'\n    ? 'panPow'\n    : 'panLinear';\n  const update =\n    `${panFn}(${extent}, ${offset}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n    ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n"]}