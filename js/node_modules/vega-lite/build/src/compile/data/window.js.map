{"version":3,"file":"window.js","sourceRoot":"","sources":["../../../../src/compile/data/window.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {vgField} from '../../fielddef';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgComparator, VgComparatorOrder, VgWindowTransform} from '../../vega.schema';\nimport {unique} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: WindowTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    this.transform.groupby.forEach(f => out.add(f));\n    this.transform.sort.forEach(m => out.add(m.field));\n    this.transform.window\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(f => out.add(f));\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as || vgField(windowFieldDef);\n  }\n\n  public hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgWindowTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as = [];\n    const params = [];\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order || 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    const result: VgWindowTransform = {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort\n    };\n\n    if (ignorePeers !== undefined) {\n      result.ignorePeers = ignorePeers;\n    }\n\n    if (groupby !== undefined) {\n      result.groupby = groupby;\n    }\n\n    if (frame !== undefined) {\n      result.frame = frame;\n    }\n\n    return result;\n  }\n}\n"]}