{"version":3,"file":"optimize.js","sourceRoot":"","sources":["../../../../src/compile/data/optimize.ts"],"names":[],"mappings":"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","sourcesContent":["import * as log from '../../log';\nimport {DataFlowNode} from './dataflow';\nimport {checkLinks} from './debug';\nimport {DataComponent} from './index';\nimport {BottomUpOptimizer, TopDownOptimizer} from './optimizer';\nimport * as optimizers from './optimizers';\n\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots: DataFlowNode[]) {\n  const leaves: DataFlowNode[] = [];\n  function append(node: DataFlowNode) {\n    if (node.numChildren() === 0) {\n      leaves.push(node);\n    } else {\n      node.children.forEach(append);\n    }\n  }\n\n  roots.forEach(append);\n  return leaves;\n}\n\nexport function isTrue(x: boolean) {\n  return x;\n}\n\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer to run.\n * @param nodes A set of nodes to optimize.\n * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.\n */\nfunction runOptimizer(\n  optimizer: typeof BottomUpOptimizer | typeof TopDownOptimizer,\n  nodes: DataFlowNode[],\n  flag: boolean\n) {\n  const flags = nodes.map(node => {\n    const optimizerInstance = new optimizer();\n    if (optimizerInstance instanceof BottomUpOptimizer) {\n      return optimizerInstance.optimizeNextFromLeaves(node);\n    } else {\n      return optimizerInstance.run(node);\n    }\n  });\n  return flags.some(isTrue) || flag;\n}\n\nfunction optimizationDataflowHelper(dataComponent: DataComponent) {\n  let roots = dataComponent.sources;\n  let mutatedFlag = false;\n\n  // mutatedFlag should always be on the right side otherwise short circuit logic might cause the mutating method to not execute\n  mutatedFlag = runOptimizer(optimizers.RemoveUnnecessaryNodes, roots, mutatedFlag);\n\n  // remove source nodes that don't have any children because they also don't have output nodes\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  mutatedFlag = runOptimizer(optimizers.RemoveUnusedSubtrees, getLeaves(roots), mutatedFlag);\n\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  mutatedFlag = runOptimizer(optimizers.MoveParseUp, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.RemoveDuplicateTimeUnits, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeParse, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeAggregateNodes, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeIdenticalNodes, roots, mutatedFlag);\n\n  dataComponent.sources = roots;\n\n  return mutatedFlag;\n}\n\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data: DataComponent) {\n  // check before optimizations\n  checkLinks(data.sources);\n\n  let firstPassCounter = 0;\n  let secondPassCounter = 0;\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data)) {\n      break;\n    }\n    firstPassCounter++;\n  }\n\n  // move facets down and make a copy of the subtree so that we can have scales at the top level\n  data.sources.map(optimizers.moveFacetDown);\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data)) {\n      break;\n    }\n    secondPassCounter++;\n  }\n\n  // check after optimizations\n  checkLinks(data.sources);\n\n  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n    log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n  }\n}\n"]}