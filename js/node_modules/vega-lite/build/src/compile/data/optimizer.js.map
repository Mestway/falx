{"version":3,"file":"optimizer.js","sourceRoot":"","sources":["../../../../src/compile/data/optimizer.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AAEpC;;;GAGG;AACH,MAAe,aAAa;IAE1B;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IACD,4CAA4C;IACrC,UAAU;QACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAgB,iBAAkB,SAAQ,aAAa;IAG3D;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,KAAK;QACP,OAAO,EAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC;IAC1E,CAAC;IAED,IAAI,KAAK,CAAC,EAAC,YAAY,EAAE,WAAW,EAAiB;QACnD,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QACD,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;IACH,CAAC;IAIM,sBAAsB,CAAC,IAAkB;QAC9C,IAAI,IAAI,YAAY,UAAU,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,MAAM,EAAC,YAAY,EAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAgB,gBAAiB,SAAQ,aAAa;CAE3D","sourcesContent":["import {DataFlowNode} from './dataflow';\nimport {OptimizerFlags} from './optimizers';\nimport {SourceNode} from './source';\n\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nabstract class OptimizerBase {\n  private _mutated: boolean;\n  constructor() {\n    this._mutated = false;\n  }\n  // Once true, _mutated is never set to false\n  public setMutated() {\n    this._mutated = true;\n  }\n\n  get mutatedFlag() {\n    return this._mutated;\n  }\n}\n\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\nexport abstract class BottomUpOptimizer extends OptimizerBase {\n  private _continue: boolean;\n\n  constructor() {\n    super();\n    this._continue = false;\n  }\n\n  public setContinue() {\n    this._continue = true;\n  }\n\n  get continueFlag() {\n    return this._continue;\n  }\n\n  get flags(): OptimizerFlags {\n    return {continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag};\n  }\n\n  set flags({continueFlag, mutatedFlag}: OptimizerFlags) {\n    if (continueFlag) {\n      this.setContinue();\n    }\n    if (mutatedFlag) {\n      this.setMutated();\n    }\n  }\n\n  public abstract run(node: DataFlowNode): OptimizerFlags;\n\n  public optimizeNextFromLeaves(node: DataFlowNode): boolean {\n    if (node instanceof SourceNode) {\n      return false;\n    }\n    const next = node.parent;\n    const {continueFlag} = this.run(node);\n    if (continueFlag) {\n      this.optimizeNextFromLeaves(next);\n    }\n    return this.mutatedFlag;\n  }\n}\n\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport abstract class TopDownOptimizer extends OptimizerBase {\n  public abstract run(node: DataFlowNode): boolean;\n}\n"]}