{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../../../src/compile/data/stack.ts"],"names":[],"mappings":"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","sourcesContent":["import {isArray, isString} from 'vega-util';\nimport {getTypedFieldDef, isFieldDef, TypedFieldDef, vgField} from '../../fielddef';\nimport {StackOffset} from '../../stack';\nimport {StackTransform} from '../../transform';\nimport {duplicate, getFirstDefined, hash} from '../../util';\nimport {VgComparatorOrder, VgCompare, VgTransform} from '../../vega.schema';\nimport {sortParams} from '../common';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nfunction getStackByFields(model: UnitModel): string[] {\n  return model.stack.stackBy.reduce(\n    (fields, by) => {\n      const fieldDef = by.fieldDef;\n\n      const _field = vgField(fieldDef);\n      if (_field) {\n        fields.push(_field);\n      }\n      return fields;\n    },\n    [] as string[]\n  );\n}\n\nexport interface StackComponent {\n  /**\n   * Faceted field.\n   */\n  facetby: string[];\n\n  dimensionFieldDef?: TypedFieldDef<string>;\n\n  /**\n   * Stack measure's field. Used in makeFromEncoding.\n   */\n  stackField: string;\n\n  /**\n   * Level of detail fields for each level in the stacked charts such as color or detail.\n   * Used in makeFromEncoding.\n   */\n  stackby?: string[];\n\n  /**\n   * Field that determines order of levels in the stacked charts.\n   * Used in both but optional in transform.\n   */\n  sort: VgCompare;\n\n  /** Mode for stacking marks.\n   */\n  offset: StackOffset;\n\n  /**\n   * Whether to impute the data before stacking. Used only in makeFromEncoding.\n   */\n  impute?: boolean;\n\n  /**\n   * The data fields to group by.\n   */\n  groupby?: string[];\n  /**\n   * Output field names of each stack field.\n   */\n  as: string[];\n}\n\nfunction isValidAsArray(as: string[] | string): as is string[] {\n  return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n}\n\nexport class StackNode extends DataFlowNode {\n  private _stack: StackComponent;\n\n  public clone() {\n    return new StackNode(null, duplicate(this._stack));\n  }\n\n  constructor(parent: DataFlowNode, stack: StackComponent) {\n    super(parent);\n\n    this._stack = stack;\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, stackTransform: StackTransform) {\n    const {stack, groupby, as, offset = 'zero'} = stackTransform;\n\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (stackTransform.sort !== undefined) {\n      for (const sortField of stackTransform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n      }\n    }\n    const sort: VgCompare = {\n      field: sortFields,\n      order: sortOrder\n    };\n    let normalizedAs: string[];\n    if (isValidAsArray(as)) {\n      normalizedAs = as;\n    } else if (isString(as)) {\n      normalizedAs = [as, as + '_end'];\n    } else {\n      normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n    }\n\n    return new StackNode(parent, {\n      stackField: stack,\n      groupby,\n      offset,\n      sort,\n      facetby: [],\n      as: normalizedAs\n    });\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel) {\n    const stackProperties = model.stack;\n    const {encoding} = model;\n\n    if (!stackProperties) {\n      return null;\n    }\n\n    let dimensionFieldDef: TypedFieldDef<string>;\n    if (stackProperties.groupbyChannel) {\n      const cDef = encoding[stackProperties.groupbyChannel];\n      dimensionFieldDef = getTypedFieldDef(cDef);\n    }\n\n    const stackby = getStackByFields(model);\n    const orderDef = model.encoding.order;\n\n    let sort: VgCompare;\n    if (isArray(orderDef) || isFieldDef(orderDef)) {\n      sort = sortParams(orderDef);\n    } else {\n      // default = descending by stackFields\n      // FIXME is the default here correct for binned fields?\n      sort = stackby.reduce(\n        (s, field) => {\n          s.field.push(field);\n          s.order.push('descending');\n          return s;\n        },\n        {field: [], order: []}\n      );\n    }\n\n    return new StackNode(parent, {\n      dimensionFieldDef,\n      stackField: model.vgField(stackProperties.fieldChannel),\n      facetby: [],\n      stackby,\n      sort,\n      offset: stackProperties.offset,\n      impute: stackProperties.impute,\n      as: [\n        model.vgField(stackProperties.fieldChannel, {suffix: 'start', forAs: true}),\n        model.vgField(stackProperties.fieldChannel, {suffix: 'end', forAs: true})\n      ]\n    });\n  }\n\n  get stack(): StackComponent {\n    return this._stack;\n  }\n\n  public addDimensions(fields: string[]) {\n    this._stack.facetby = this._stack.facetby.concat(fields);\n  }\n\n  public dependentFields() {\n    const out = new Set();\n\n    out.add(this._stack.stackField);\n\n    this.getGroupbyFields().forEach(f => out.add(f));\n    this._stack.facetby.forEach(f => out.add(f));\n    const field = this._stack.sort.field;\n    isArray(field) ? field.forEach(f => out.add(f)) : out.add(field);\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this._stack.as);\n  }\n\n  public hash() {\n    return `Stack ${hash(this._stack)}`;\n  }\n\n  private getGroupbyFields() {\n    const {dimensionFieldDef, impute, groupby} = this._stack;\n    if (dimensionFieldDef) {\n      if (dimensionFieldDef.bin) {\n        if (impute) {\n          // For binned group by field with impute, we calculate bin_mid\n          // as we cannot impute two fields simultaneously\n          return [vgField(dimensionFieldDef, {binSuffix: 'mid'})];\n        }\n        return [\n          // For binned group by field without impute, we need both bin (start) and bin_end\n          vgField(dimensionFieldDef, {}),\n          vgField(dimensionFieldDef, {binSuffix: 'end'})\n        ];\n      }\n      return [vgField(dimensionFieldDef)];\n    }\n    return groupby || [];\n  }\n\n  public assemble(): VgTransform[] {\n    const transform: VgTransform[] = [];\n    const {facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as} = this._stack;\n\n    // Impute\n    if (impute && dimensionFieldDef) {\n      if (dimensionFieldDef.bin) {\n        // As we can only impute one field at a time, we need to calculate\n        // mid point for a binned field\n        transform.push({\n          type: 'formula',\n          expr:\n            '(' +\n            vgField(dimensionFieldDef, {expr: 'datum'}) +\n            '+' +\n            vgField(dimensionFieldDef, {expr: 'datum', binSuffix: 'end'}) +\n            ')/2',\n          as: vgField(dimensionFieldDef, {binSuffix: 'mid', forAs: true})\n        });\n      }\n\n      transform.push({\n        type: 'impute',\n        field,\n        groupby: [...stackby, ...facetby],\n        key: vgField(dimensionFieldDef, {binSuffix: 'mid'}),\n        method: 'value',\n        value: 0\n      });\n    }\n\n    // Stack\n    transform.push({\n      type: 'stack',\n      groupby: this.getGroupbyFields().concat(facetby),\n      field,\n      sort,\n      as,\n      offset\n    });\n\n    return transform;\n  }\n}\n"]}