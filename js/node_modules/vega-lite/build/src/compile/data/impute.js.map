{"version":3,"file":"impute.js","sourceRoot":"","sources":["../../../../src/compile/data/impute.ts"],"names":[],"mappings":"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","sourcesContent":["import {SignalRef} from 'vega';\nimport {isFieldDef} from '../../fielddef';\nimport {ImputeSequence, ImputeTransform, isImputeSequence} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgFormulaTransform, VgImputeTransform, VgWindowTransform} from '../../vega.schema';\nimport {pathGroupingFields} from '../mark/mark';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class ImputeNode extends DataFlowNode {\n  public clone() {\n    return new ImputeNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: ImputeTransform) {\n    super(parent);\n  }\n\n  public producedFields() {\n    return new Set([this.transform.impute]);\n  }\n\n  private processSequence(keyvals: ImputeSequence): SignalRef {\n    const {start = 0, stop, step} = keyvals;\n    const result = [start, stop, ...(step ? [step] : [])].join(',');\n\n    return {signal: `sequence(${result})`};\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, imputeTransform: ImputeTransform): ImputeNode {\n    return new ImputeNode(parent, imputeTransform);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel) {\n    const encoding = model.encoding;\n    const xDef = encoding.x;\n    const yDef = encoding.y;\n\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n      const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\n      if (imputedChannel === undefined) {\n        return undefined;\n      }\n      const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\n      const {method, value, frame, keyvals} = imputedChannel.impute;\n      const groupbyFields = pathGroupingFields(model.mark, encoding);\n\n      return new ImputeNode(parent, {\n        impute: imputedChannel.field,\n        key: keyChannel.field,\n        ...(method ? {method} : {}),\n        ...(value !== undefined ? {value} : {}),\n        ...(frame ? {frame} : {}),\n        ...(keyvals !== undefined ? {keyvals} : {}),\n        ...(groupbyFields.length ? {groupby: groupbyFields} : {})\n      });\n    }\n    return null;\n  }\n\n  public hash() {\n    return `Impute ${hash(this.transform)}`;\n  }\n\n  public assemble() {\n    const {impute, key, keyvals, method, groupby, value, frame = [null, null]} = this.transform;\n\n    const initialImpute: VgImputeTransform = {\n      type: 'impute',\n      field: impute,\n      key,\n      ...(keyvals ? {keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals} : {}),\n      method: 'value',\n      ...(groupby ? {groupby} : {}),\n      value: null\n    };\n    let setImputedField;\n    if (method && method !== 'value') {\n      const deriveNewField: VgWindowTransform = {\n        type: 'window',\n        as: [`imputed_${impute}_value`],\n        ops: [method],\n        fields: [impute],\n        frame,\n        ignorePeers: false,\n        ...(groupby ? {groupby} : {})\n      };\n      const replaceOriginal: VgFormulaTransform = {\n        type: 'formula',\n        expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,\n        as: impute\n      };\n      setImputedField = [deriveNewField, replaceOriginal];\n    } else {\n      const replaceWithValue: VgFormulaTransform = {\n        type: 'formula',\n        expr: `datum.${impute} === null ? ${value} : datum.${impute}`,\n        as: impute\n      };\n      setImputedField = [replaceWithValue];\n    }\n\n    return [initialImpute, ...setImputedField];\n  }\n}\n"]}