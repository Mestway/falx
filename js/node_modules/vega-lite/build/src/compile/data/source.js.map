{"version":3,"file":"source.js","sourceRoot":"","sources":["../../../../src/compile/data/source.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,YAAY,EAAE,WAAW,EAAE,SAAS,EAAC,MAAM,YAAY,CAAC;AACtF,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AAGhD,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AAExC,MAAM,OAAO,UAAW,SAAQ,YAAY;IAK1C,YAAY,IAAU;QACpB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,4BAA4B;QAEzC,IAAI,GAAG,IAAI,IAAI,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAE,EAAiB,CAAC;QAEpF,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,CAAC,KAAK,GAAG,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC;SACpC;aAAM,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1B,IAAI,CAAC,KAAK,GAAG,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC;YAE7B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBAChB,gDAAgD;gBAChD,wGAAwG;gBACxG,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,EAAE,gBAAgB,CAAC,EAAE;oBAC1E,gBAAgB,GAAG,MAAM,CAAC;iBAC3B;gBAED,iFAAiF;gBACjF,MAAM,CAAC,IAAI,GAAG,gBAAkC,CAAC;aAClD;SACF;aAAM,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACjB;QAED,2BAA2B;QAC3B,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;SACxB;QAED,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;SAC5B;IACH,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,OAAO;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,QAAQ,CAAC,IAAY;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,IAAI,MAAM,CAAC,MAAoB;QAC7B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAEM,MAAM;QACX,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACnE,CAAC;IAEM,IAAI;QACT,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAEM,QAAQ;QACb,uBACE,IAAI,EAAE,IAAI,CAAC,KAAK,IACb,IAAI,CAAC,KAAK,IACb,SAAS,EAAE,EAAE,IACb;IACJ,CAAC;CACF","sourcesContent":["import {Data, DataFormatType, isInlineData, isNamedData, isUrlData} from '../../data';\nimport {contains, keys, omit} from '../../util';\nimport {VgData} from '../../vega.schema';\nimport {DataFormat} from './../../data';\nimport {DataFlowNode} from './dataflow';\n\nexport class SourceNode extends DataFlowNode {\n  private _data: Partial<VgData>;\n\n  private _name: string;\n\n  constructor(data: Data) {\n    super(null); // source cannot have parent\n\n    data = data || {name: 'source'};\n    const format = data.format ? {...omit(data.format, ['parse'])} : ({} as DataFormat);\n\n    if (isInlineData(data)) {\n      this._data = {values: data.values};\n    } else if (isUrlData(data)) {\n      this._data = {url: data.url};\n\n      if (!format.type) {\n        // Extract extension from URL using snippet from\n        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n        let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n        if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n          defaultExtension = 'json';\n        }\n\n        // defaultExtension has type string but we ensure that it is DataFormatType above\n        format.type = defaultExtension as DataFormatType;\n      }\n    } else if (isNamedData(data)) {\n      this._data = {};\n    }\n\n    // any dataset can be named\n    if (data.name) {\n      this._name = data.name;\n    }\n\n    if (format && keys(format).length > 0) {\n      this._data.format = format;\n    }\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  public hasName(): boolean {\n    return !!this._name;\n  }\n\n  get dataName() {\n    return this._name;\n  }\n\n  set dataName(name: string) {\n    this._name = name;\n  }\n\n  set parent(parent: DataFlowNode) {\n    throw new Error('Source nodes have to be roots.');\n  }\n\n  public remove() {\n    throw new Error('Source nodes are roots and cannot be removed.');\n  }\n\n  public hash(): string | number {\n    throw new Error('Cannot hash sources');\n  }\n\n  public assemble(): VgData {\n    return {\n      name: this._name,\n      ...this._data,\n      transform: []\n    };\n  }\n}\n"]}