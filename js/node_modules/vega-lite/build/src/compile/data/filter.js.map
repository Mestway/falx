{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../src/compile/data/filter.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,SAAS,EAAC,MAAM,YAAY,CAAC;AAGrC,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AACxC,OAAO,EAAC,kBAAkB,EAAC,MAAM,eAAe,CAAC;AAEjD,MAAM,OAAO,UAAW,SAAQ,YAAY;IAO1C,YAAY,MAAoB,EAAmB,KAAY,EAAmB,MAAiC;QACjH,KAAK,CAAC,MAAM,CAAC,CAAC;QADmC,UAAK,GAAL,KAAK,CAAO;QAAmB,WAAM,GAAN,MAAM,CAA2B;QAGjH,6CAA6C;QAC7C,8FAA8F;QAC9F,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEtD,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAZM,KAAK;QACV,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,CAAC;IAYM,eAAe;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,QAAQ;QACb,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;IAEM,IAAI;QACT,OAAO,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import {LogicalOperand} from '../../logical';\nimport {Predicate} from '../../predicate';\nimport {duplicate} from '../../util';\nimport {VgFilterTransform} from '../../vega.schema';\nimport {Model} from '../model';\nimport {expression} from '../predicate';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\nexport class FilterNode extends DataFlowNode {\n  private expr: string;\n  private _dependentFields: Set<string>;\n  public clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  constructor(parent: DataFlowNode, private readonly model: Model, private readonly filter: LogicalOperand<Predicate>) {\n    super(parent);\n\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    this.expr = expression(this.model, this.filter, this);\n\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public assemble(): VgFilterTransform {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  public hash() {\n    return `Filter ${this.expr}`;\n  }\n}\n"]}