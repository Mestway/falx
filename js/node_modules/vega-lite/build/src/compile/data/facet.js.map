{"version":3,"file":"facet.js","sourceRoot":"","sources":["../../../../src/compile/data/facet.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {isBinning} from '../../bin';\nimport {COLUMN, ROW, ScaleChannel} from '../../channel';\nimport {vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {hasDiscreteDomain} from '../../scale';\nimport {EncodingSortField, isSortField} from '../../sort';\nimport {hash} from '../../util';\nimport {isVgRangeStep, VgData} from '../../vega.schema';\nimport {FacetModel} from '../facet';\nimport {Model} from '../model';\nimport {assembleDomain, getFieldFromDomain} from '../scale/domain';\nimport {sortArrayIndexField} from './calculate';\nimport {DataFlowNode} from './dataflow';\n\ninterface ChildIndependentFieldsWithStep {\n  x?: string;\n  y?: string;\n}\n\ninterface FacetChannelInfo {\n  name: string;\n  fields: string[];\n  sortField?: EncodingSortField<string>;\n\n  sortIndexField?: string;\n}\n\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n  private readonly column: FacetChannelInfo;\n\n  private readonly row: FacetChannelInfo;\n\n  private readonly childModel: Model;\n\n  /**\n   * @param model The facet model.\n   * @param name The name that this facet source will have.\n   * @param data The source data for this facet data.\n   */\n  public constructor(\n    parent: DataFlowNode,\n    public readonly model: FacetModel,\n    public readonly name: string,\n    public data: string\n  ) {\n    super(parent);\n\n    for (const channel of [COLUMN, ROW]) {\n      const fieldDef = model.facet[channel];\n      if (fieldDef) {\n        const {bin, sort} = fieldDef;\n        this[channel] = {\n          name: model.getName(`${channel}_domain`),\n          fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, {binSuffix: 'end'})] : [])],\n          ...(isSortField(sort)\n            ? {sortField: sort}\n            : isArray(sort)\n            ? {sortIndexField: sortArrayIndexField(fieldDef, channel)}\n            : {})\n        };\n      }\n    }\n    this.childModel = model.child;\n  }\n\n  public hash() {\n    let out = `Facet`;\n\n    if (this.column) {\n      out += ` c:${hash(this.column)}`;\n    }\n\n    if (this.row) {\n      out += ` r:${hash(this.row)}`;\n    }\n\n    return out;\n  }\n\n  get fields() {\n    return [...((this.column && this.column.fields) || []), ...((this.row && this.row.fields) || [])];\n  }\n\n  /**\n   * The name to reference this source is its name.\n   */\n  public getSource() {\n    return this.name;\n  }\n\n  private getChildIndependentFieldsWithStep() {\n    const childIndependentFieldsWithStep: ChildIndependentFieldsWithStep = {};\n\n    for (const channel of ['x', 'y'] as ScaleChannel[]) {\n      const childScaleComponent = this.childModel.component.scales[channel];\n      if (childScaleComponent && !childScaleComponent.merged) {\n        const type = childScaleComponent.get('type');\n        const range = childScaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const domain = assembleDomain(this.childModel, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            childIndependentFieldsWithStep[channel] = field;\n          } else {\n            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n          }\n        }\n      }\n    }\n\n    return childIndependentFieldsWithStep;\n  }\n\n  private assembleRowColumnData(\n    channel: 'row' | 'column',\n    crossedDataName: string,\n    childIndependentFieldsWithStep: ChildIndependentFieldsWithStep\n  ): VgData {\n    const childChannel = channel === 'row' ? 'y' : 'x';\n\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n\n    if (childIndependentFieldsWithStep[childChannel]) {\n      if (crossedDataName) {\n        // If there is a crossed data, calculate max\n        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n\n        ops.push('max');\n      } else {\n        // If there is no crossed data, just calculate distinct\n        fields.push(childIndependentFieldsWithStep[childChannel]);\n        ops.push('distinct');\n      }\n      // Although it is technically a max, just name it distinct so it's easier to refer to it\n      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n    }\n\n    const {sortField, sortIndexField} = this[channel];\n    if (sortField) {\n      const {op, field} = sortField;\n      fields.push(field);\n      ops.push(op);\n      as.push(vgField(sortField, {forAs: true}));\n    } else if (sortIndexField) {\n      fields.push(sortIndexField);\n      ops.push('max');\n      as.push(sortIndexField);\n    }\n\n    return {\n      name: this[channel].name,\n      // Use data from the crossed one if it exist\n      source: crossedDataName || this.data,\n      transform: [\n        {\n          type: 'aggregate',\n          groupby: this[channel].fields,\n          ...(fields.length\n            ? {\n                fields,\n                ops,\n                as\n              }\n            : {})\n        }\n      ]\n    };\n  }\n\n  public assemble() {\n    const data: VgData[] = [];\n    let crossedDataName = null;\n    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n\n    if (this.column && this.row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n      // Need to create a cross dataset to correctly calculate cardinality\n      crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n\n      const fields = [].concat(\n        childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [],\n        childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []\n      );\n      const ops = fields.map((): AggregateOp => 'distinct');\n\n      data.push({\n        name: crossedDataName,\n        source: this.data,\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: [...this.column.fields, ...this.row.fields],\n            fields,\n            ops\n          }\n        ]\n      });\n    }\n\n    for (const channel of [COLUMN, ROW]) {\n      if (this[channel]) {\n        data.push(this.assembleRowColumnData(channel, crossedDataName, childIndependentFieldsWithStep));\n      }\n    }\n\n    return data;\n  }\n}\n"]}