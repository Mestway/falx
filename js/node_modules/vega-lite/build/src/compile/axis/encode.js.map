{"version":3,"file":"encode.js","sourceRoot":"","sources":["../../../../src/compile/axis/encode.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAC,oBAAoB,EAAC,MAAM,WAAW,CAAC;AAG/C,MAAM,UAAU,MAAM,CAAC,KAAgB,EAAE,OAA6B,EAAE,mBAAwB,EAAE,MAAkB;IAClH,MAAM,QAAQ,GACZ,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACvB,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAChG,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAE5B,IAAI,UAAU,GAAQ,EAAE,CAAC;IAEzB,OAAO;IACP,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC5B,MAAM,UAAU,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,GAAG,CAAC;QAElF,MAAM,IAAI,GAAG,oBAAoB,CAC/B,aAAa,EACb,QAAQ,CAAC,QAAQ,EACjB,IAAI,CAAC,MAAM,EACX,MAAM,CAAC,IAAI,CAAC,eAAe,EAC3B,IAAI,EACJ,UAAU,CACX,CAAC;QAEF,IAAI,IAAI,EAAE;YACR,UAAU,CAAC,IAAI,GAAG,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;SAClC;KACF;IAED,UAAU,qBACL,UAAU,EACV,mBAAmB,CACvB,CAAC;IAEF,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;AAChE,CAAC","sourcesContent":["import {AxisOrient} from 'vega';\nimport {PositionScaleChannel} from '../../channel';\nimport {isTimeFieldDef} from '../../fielddef';\nimport {ScaleType} from '../../scale';\nimport {keys} from '../../util';\nimport {timeFormatExpression} from '../common';\nimport {UnitModel} from '../unit';\n\nexport function labels(model: UnitModel, channel: PositionScaleChannel, specifiedLabelsSpec: any, orient: AxisOrient) {\n  const fieldDef =\n    model.fieldDef(channel) ||\n    (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);\n  const axis = model.axis(channel);\n  const config = model.config;\n\n  let labelsSpec: any = {};\n\n  // Text\n  if (isTimeFieldDef(fieldDef)) {\n    const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n\n    const expr = timeFormatExpression(\n      'datum.value',\n      fieldDef.timeUnit,\n      axis.format,\n      config.axis.shortTimeLabels,\n      null,\n      isUTCScale\n    );\n\n    if (expr) {\n      labelsSpec.text = {signal: expr};\n    }\n  }\n\n  labelsSpec = {\n    ...labelsSpec,\n    ...specifiedLabelsSpec\n  };\n\n  return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\n"]}