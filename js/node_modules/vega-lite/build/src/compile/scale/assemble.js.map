{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/scale/assemble.ts"],"names":[],"mappings":"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","sourcesContent":["import {SignalRef} from 'vega';\nimport {isArray} from 'vega-util';\nimport {Channel, ScaleChannel} from '../../channel';\nimport {globalWholeWordRegExp, keys} from '../../util';\nimport {isVgRangeStep, VgRange, VgScale} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\nimport {isRawSelectionDomain, selectionScaleDomain} from '../selection/selection';\nimport {SignalRefComponent} from '../signal';\nimport {assembleDomain} from './domain';\n\nexport function assembleScales(model: Model): VgScale[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    // For concat / layer / repeat, include scales of children too\n    return model.children.reduce((scales, child) => {\n      return scales.concat(assembleScales(child));\n    }, assembleScalesForModel(model));\n  } else {\n    // For facet, child scales would not be included in the parent's scope.\n    // For unit, there is no child.\n    return assembleScalesForModel(model);\n  }\n}\n\nexport function assembleScalesForModel(model: Model): VgScale[] {\n  return keys(model.component.scales).reduce(\n    (scales: VgScale[], channel: ScaleChannel) => {\n      const scaleComponent = model.component.scales[channel];\n      if (scaleComponent.merged) {\n        // Skipped merged scales\n        return scales;\n      }\n\n      const scale = scaleComponent.combine();\n\n      // need to separate const and non const object destruction\n      let {domainRaw} = scale;\n      const {name, type, domainRaw: _d, range: _r, ...otherScaleProps} = scale;\n\n      const range = assembleScaleRange(scale.range, name, model, channel);\n\n      // As scale parsing occurs before selection parsing, a temporary signal\n      // is used for domainRaw. Here, we detect if this temporary signal\n      // is set, and replace it with the correct domainRaw signal.\n      // For more information, see isRawSelectionDomain in selection.ts.\n      if (domainRaw && isRawSelectionDomain(domainRaw)) {\n        domainRaw = selectionScaleDomain(model, domainRaw);\n      }\n\n      scales.push({\n        name,\n        type,\n        domain: assembleDomain(model, channel),\n        ...(domainRaw ? {domainRaw} : {}),\n        range: range,\n        ...otherScaleProps\n      });\n\n      return scales;\n    },\n    [] as VgScale[]\n  );\n}\nfunction assembleExprSignal(scaleRange: SignalRefComponent, model: Model) {\n  let signal = scaleRange.expr;\n  for (const signalName of scaleRange.signalNames) {\n    const newName = model.getSignalName(signalName);\n    if (newName !== signalName) {\n      // replace the signal name\n\n      const regEx = globalWholeWordRegExp(signalName);\n\n      signal = signal.replace(regEx, newName);\n    }\n  }\n  return {signal};\n}\n\nexport function assembleScaleRange(\n  scaleRange: VgRange<SignalRefComponent>,\n  scaleName: string,\n  model: Model,\n  channel: Channel\n): VgRange<SignalRef> {\n  if (scaleRange instanceof SignalRefComponent) {\n    return assembleExprSignal(scaleRange, model);\n  } else if (isArray(scaleRange)) {\n    return scaleRange.map(val => {\n      if (val instanceof SignalRefComponent) {\n        return assembleExprSignal(val, model);\n      }\n      return val;\n    });\n  } else {\n    // add signals to x/y range\n    if (channel === 'x' || channel === 'y') {\n      if (isVgRangeStep(scaleRange)) {\n        // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n        return {\n          step: {signal: scaleName + '_step'}\n        };\n      }\n    }\n    return scaleRange;\n  }\n}\n"]}