{"version":3,"file":"resolve.js","sourceRoot":"","sources":["../../../src/compile/resolve.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,uBAAuB,EAAe,MAAM,YAAY,CAAC;AACjE,OAAO,KAAK,GAAG,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AACjC,OAAO,EAAC,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,aAAa,EAAQ,MAAM,SAAS,CAAC;AAExF,MAAM,UAAU,mBAAmB,CAAC,OAAqB,EAAE,KAAY;IACrE,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;QAC9C,OAAO,QAAQ,CAAC;KACjB;SAAM,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACvD,OAAO,QAAQ,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC;KAC9E;IACD,oDAAoD;IACpD,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,OAAgB,EAAE,OAAqB;IACvE,MAAM,mBAAmB,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,QAAQ,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;IAE7E,IAAI,mBAAmB,KAAK,aAAa,EAAE;QACzC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;YACxC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,qCAAqC,CAAC,OAAO,CAAC,CAAC,CAAC;SACtE;QACD,OAAO,aAAa,CAAC;KACtB;IAED,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC;AAC7C,CAAC","sourcesContent":["import {POSITION_SCALE_CHANNELS, ScaleChannel} from '../channel';\nimport * as log from '../log';\nimport {Resolve, ResolveMode} from '../resolve';\nimport {contains} from '../util';\nimport {isConcatModel, isFacetModel, isLayerModel, isRepeatModel, Model} from './model';\n\nexport function defaultScaleResolve(channel: ScaleChannel, model: Model): ResolveMode {\n  if (isLayerModel(model) || isFacetModel(model)) {\n    return 'shared';\n  } else if (isConcatModel(model) || isRepeatModel(model)) {\n    return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n  }\n  /* istanbul ignore next: should never reach here. */\n  throw new Error('invalid model type for resolve');\n}\n\nexport function parseGuideResolve(resolve: Resolve, channel: ScaleChannel): ResolveMode {\n  const channelScaleResolve = resolve.scale[channel];\n  const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n\n  if (channelScaleResolve === 'independent') {\n    if (resolve[guide][channel] === 'shared') {\n      log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n    }\n    return 'independent';\n  }\n\n  return resolve[guide][channel] || 'shared';\n}\n"]}