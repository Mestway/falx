{"version":3,"file":"facet.js","sourceRoot":"","sources":["../../../src/spec/facet.ts"],"names":[],"mappings":"AA4BA,MAAM,UAAU,eAAe,CAAkB,UAAmC;IAClF,OAAO,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAChD,CAAC;AA8BD,MAAM,UAAU,WAAW,CAAC,IAAc;IACxC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC;AACrC,CAAC","sourcesContent":["import {ChannelDef, Field, FieldDef, RepeatRef, SortableFieldDef} from '../fielddef';\nimport {Header} from '../header';\nimport {Resolve} from '../resolve';\nimport {BaseSpec} from './base';\nimport {FacetMapping} from './facet';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericCompositionLayout} from './toplevel';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface FacetFieldDef<F extends Field> extends SortableFieldDef<F> {\n  /**\n   * An object defining properties of a facet's header.\n   */\n  header?: Header;\n}\n\nexport interface FacetMapping<F extends Field> {\n  /**\n   * Vertical facets for trellis plots.\n   */\n  row?: FacetFieldDef<F>;\n\n  /**\n   * Horizontal facets for trellis plots.\n   */\n  column?: FacetFieldDef<F>;\n}\n\nexport function isFacetFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is FacetFieldDef<F> {\n  return !!channelDef && !!channelDef['header'];\n}\n\n/**\n * Base interface for a facet specification.\n */\nexport interface GenericFacetSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayout {\n  /**\n   * An object that describes mappings between `row` and `column` channels and their field definitions.\n   */\n  facet: FacetMapping<string | RepeatRef>;\n\n  /**\n   * A specification of the view that gets faceted.\n   */\n  spec: L | U;\n  // TODO: replace this with GenericSpec<U> once we support all cases;\n\n  /**\n   * Scale, axis, and legend resolutions for facets.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * A facet specification without any shortcut / expansion syntax\n */\nexport type NormalizedFacetSpec = GenericFacetSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isFacetSpec(spec: BaseSpec): spec is GenericFacetSpec<any, any> {\n  return spec['facet'] !== undefined;\n}\n"]}