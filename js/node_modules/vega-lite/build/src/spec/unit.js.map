{"version":3,"file":"unit.js","sourceRoot":"","sources":["../../../src/spec/unit.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,qBAAqB,IAAI,SAAS,EAAC,MAAM,cAAc,CAAC;AA8ChE,MAAM,UAAU,UAAU,CAAC,IAAc;IACvC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACxB,CAAC","sourcesContent":["import {Encoding, EncodingWithFacet} from '../encoding';\nimport {RepeatRef} from '../fielddef';\nimport {AnyMark, Mark, MarkDef} from '../mark';\nimport {Projection} from '../projection';\nimport {SelectionDef} from '../selection';\nimport {BaseSpec, LayoutSizeMixins} from './base';\n\nexport {normalizeTopLevelSpec as normalize} from '../normalize';\nexport {BaseSpec, DataMixins, LayoutSizeMixins} from './base';\nexport {TopLevel} from './toplevel';\n\n/**\n * Base interface for a unit (single-view) specification.\n */\nexport interface GenericUnitSpec<E extends Encoding<any>, M> extends BaseSpec, LayoutSizeMixins {\n  /**\n   * A string describing the mark type (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"rule\"`, `\"geoshape\"`, and `\"text\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\n   */\n  mark: M;\n\n  /**\n   * A key-value mapping between encoding channels and definition of fields.\n   */\n  encoding?: E;\n\n  /**\n   * An object defining properties of geographic projection, which will be applied to `shape` path for `\"geoshape\"` marks\n   * and to `latitude` and `\"longitude\"` channels for other marks.\n   */\n  projection?: Projection;\n\n  /**\n   * A key-value mapping between selection names and definitions.\n   */\n  selection?: {[name: string]: SelectionDef};\n}\n\n/**\n * A unit specification without any shortcut/expansion syntax.\n */\nexport type NormalizedUnitSpec = GenericUnitSpec<Encoding<string | RepeatRef>, Mark | MarkDef>;\n\n/**\n * Unit spec that can have a composite mark.\n */\nexport type CompositeUnitSpec = GenericUnitSpec<Encoding<string | RepeatRef>, AnyMark>;\n\n/**\n * Unit spec that can have a composite mark and row or column channels.\n */\nexport type FacetedCompositeUnitSpec = GenericUnitSpec<EncodingWithFacet<string | RepeatRef>, AnyMark>;\n\nexport function isUnitSpec(spec: BaseSpec): spec is FacetedCompositeUnitSpec | NormalizedUnitSpec {\n  return !!spec['mark'];\n}\n"]}