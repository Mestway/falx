{"version":3,"file":"concat.js","sourceRoot":"","sources":["../../../src/spec/concat.ts"],"names":[],"mappings":"AA6CA,MAAM,UAAU,YAAY,CAAC,IAAc;IACzC,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAc;IAC1C,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAc;IAC1C,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC;AACvC,CAAC","sourcesContent":["import {Resolve} from '../resolve';\nimport {BaseSpec} from './base';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {ConcatLayout} from './toplevel';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\n/**\n * Base interface for a vertical concatenation specification.\n */\nexport interface GenericVConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    ConcatLayout {\n  /**\n   * A list of views that should be concatenated and put into a column.\n   */\n  vconcat: (GenericSpec<U, L>)[];\n\n  /**\n   * Scale, axis, and legend resolutions for vertically concatenated charts.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * Base interface for a horizontal concatenation specification.\n */\nexport interface GenericHConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    ConcatLayout {\n  /**\n   * A list of views that should be concatenated and put into a row.\n   */\n  hconcat: (GenericSpec<U, L>)[];\n\n  /**\n   * Scale, axis, and legend resolutions for horizontally concatenated charts.\n   */\n  resolve?: Resolve;\n}\n/** A concat spec without any shortcut/expansion syntax */\nexport type NormalizedConcatSpec =\n  | GenericVConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>\n  | GenericHConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> | GenericHConcatSpec<any, any> {\n  return isVConcatSpec(spec) || isHConcatSpec(spec);\n}\n\nexport function isVConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> {\n  return spec['vconcat'] !== undefined;\n}\n\nexport function isHConcatSpec(spec: BaseSpec): spec is GenericHConcatSpec<any, any> {\n  return spec['hconcat'] !== undefined;\n}\n"]}