{"version":3,"file":"boxplot.js","sourceRoot":"","sources":["../../../src/compositemark/boxplot.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNumber, isObject} from 'vega-util';\nimport {Channel} from '../channel';\nimport {Config} from '../config';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport {PositionFieldDef} from '../fielddef';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedLayerSpec, NormalizedUnitSpec} from '../spec';\nimport {AggregatedFieldDef, CalculateTransform, Transform} from '../transform';\nimport {Flag, getFirstDefined, keys} from '../util';\nimport {Orient} from '../vega.schema';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  CompositeMarkTooltipSummary,\n  filterUnsupportedChannels,\n  GenericCompositeMarkDef,\n  getCompositeMarkTooltip,\n  makeCompositeAggregatePartFactory,\n  partLayerMixins,\n  PartsMixins\n} from './common';\n\nexport const BOXPLOT: 'boxplot' = 'boxplot';\nexport type BoxPlot = typeof BOXPLOT;\n\nexport type BoxPlotPart = 'box' | 'median' | 'outliers' | 'rule' | 'ticks';\n\nconst BOXPLOT_PART_INDEX: Flag<BoxPlotPart> = {\n  box: 1,\n  median: 1,\n  outliers: 1,\n  rule: 1,\n  ticks: 1\n};\n\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\n\nexport type BoxPlotPartsMixins = PartsMixins<BoxPlotPart>;\n\nexport interface BoxPlotConfig extends BoxPlotPartsMixins {\n  /** Size of the box and median tick of a box plot */\n  size?: number;\n\n  /**\n   * The extent of the whiskers. Available options include:\n   * - `\"min-max\"`: min and max are the lower and upper whiskers respectively.\n   * - A number representing multiple of the interquartile range (Q3-Q1).  This number will be multiplied by the IQR. The product will be added to the third quartile to get the upper whisker and subtracted from the first quartile to get the lower whisker.\n   *\n   * __Default value:__ `1.5`.\n   */\n  extent?: 'min-max' | number;\n}\n\nexport type BoxPlotDef = GenericCompositeMarkDef<BoxPlot> &\n  BoxPlotConfig & {\n    /**\n     * Type of the mark.  For box plots, this should always be `\"boxplot\"`.\n     * [boxplot](https://vega.github.io/vega-lite/docs/boxplot.html)\n     */\n    type: BoxPlot;\n\n    /**\n     * Orientation of the box plot.  This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\n     *\n     * __Default value:__ `\"vertical\"`.\n     */\n    orient?: Orient;\n  };\n\nexport interface BoxPlotConfigMixins {\n  /**\n   * Box Config\n   */\n  boxplot?: BoxPlotConfig;\n}\n\nconst boxPlotSupportedChannels: Channel[] = ['x', 'y', 'color', 'detail', 'opacity', 'size'];\n\nexport function normalizeBoxPlot(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  config: Config\n): NormalizedLayerSpec {\n  spec = filterUnsupportedChannels(spec, boxPlotSupportedChannels, BOXPLOT);\n\n  // TODO: use selection\n  const {mark, encoding: _encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: BoxPlotDef = isMarkDef(mark) ? mark : {type: mark};\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported('boxplot'));\n  }\n\n  const extent = markDef.extent || config.boxplot.extent;\n  const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n  const isMinMax = !isNumber(extent);\n\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    groupby,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    tooltipEncoding\n  } = boxParams(spec, extent, config);\n\n  const {color, size, ...encodingWithoutSizeColorAndContinuousAxis} = encodingWithoutContinuousAxis;\n\n  const makeBoxPlotPart = (sharedEncoding: Encoding<string>) => {\n    return makeCompositeAggregatePartFactory<BoxPlotPartsMixins>(\n      markDef,\n      continuousAxis,\n      continuousAxisChannelDef,\n      sharedEncoding,\n      config.boxplot\n    );\n  };\n\n  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n  const makeBoxPlotMidTick = makeBoxPlotPart({...encodingWithoutSizeColorAndContinuousAxis, ...(size ? {size} : {})});\n\n  const endTick: MarkDef = {type: 'tick', color: 'black', opacity: 1, orient: ticksOrient};\n\n  const bar: MarkDef = {type: 'bar', ...(sizeValue ? {size: sizeValue} : {})};\n\n  const midTick: MarkDef = {\n    type: 'tick',\n    ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {color: config.boxplot.median.color} : {}),\n    ...(sizeValue ? {size: sizeValue} : {}),\n    orient: ticksOrient\n  };\n\n  // TODO: support hiding certain mark parts\n  const boxLayer: NormalizedUnitSpec[] = [\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'lower_whisker',\n      endPositionPrefix: 'lower_box',\n      extraEncoding: tooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'upper_box',\n      endPositionPrefix: 'upper_whisker',\n      extraEncoding: tooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'lower_whisker',\n      extraEncoding: tooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'upper_whisker',\n      extraEncoding: tooltipEncoding\n    }),\n    ...makeBoxPlotBox({\n      partName: 'box',\n      mark: bar,\n      positionPrefix: 'lower_box',\n      endPositionPrefix: 'upper_box',\n      extraEncoding: tooltipEncoding\n    }),\n    ...makeBoxPlotMidTick({\n      partName: 'median',\n      mark: midTick,\n      positionPrefix: 'mid_box',\n      extraEncoding: tooltipEncoding\n    })\n  ];\n\n  let outliersLayerMixins: NormalizedUnitSpec[] = [];\n\n  if (!isMinMax) {\n    const lowerBoxExpr: string = 'datum.lower_box_' + continuousAxisChannelDef.field;\n    const upperBoxExpr: string = 'datum.upper_box_' + continuousAxisChannelDef.field;\n    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n    const fieldExpr = `datum.${continuousAxisChannelDef.field}`;\n\n    outliersLayerMixins = partLayerMixins<BoxPlotPartsMixins>(markDef, 'outliers', config.boxplot, {\n      transform: [\n        {\n          window: boxParamsQuartiles(continuousAxisChannelDef.field),\n          frame: [null, null],\n          groupby\n        },\n        {\n          filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`\n        }\n      ],\n      mark: 'point',\n      encoding: {\n        [continuousAxis]: {\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type\n        },\n        ...encodingWithoutSizeColorAndContinuousAxis\n      }\n    });\n  }\n\n  if (outliersLayerMixins.length > 0) {\n    // tukey box plot with outliers included\n    return {\n      ...outerSpec,\n      layer: [\n        {\n          // boxplot\n          transform,\n          layer: boxLayer\n        },\n        ...outliersLayerMixins\n      ]\n    };\n  }\n  return {\n    ...outerSpec,\n    transform: (outerSpec.transform || []).concat(transform),\n    layer: boxLayer\n  };\n}\n\nfunction boxParamsQuartiles(continousAxisField: string): AggregatedFieldDef[] {\n  return [\n    {\n      op: 'q1',\n      field: continousAxisField,\n      as: 'lower_box_' + continousAxisField\n    },\n    {\n      op: 'q3',\n      field: continousAxisField,\n      as: 'upper_box_' + continousAxisField\n    }\n  ];\n}\n\nfunction boxParams(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  extent: 'min-max' | number,\n  config: Config\n): {\n  transform: Transform[];\n  groupby: string[];\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxis: 'x' | 'y';\n  encodingWithoutContinuousAxis: Encoding<string>;\n  ticksOrient: Orient;\n  tooltipEncoding: Encoding<string>;\n} {\n  const orient = compositeMarkOrient(spec, BOXPLOT);\n  const {continuousAxisChannelDef, continuousAxis} = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  const isMinMax = !isNumber(extent);\n  const boxplotSpecificAggregate: AggregatedFieldDef[] = [\n    ...boxParamsQuartiles(continuousFieldName),\n    {\n      op: 'median',\n      field: continuousFieldName,\n      as: 'mid_box_' + continuousFieldName\n    },\n    {\n      op: 'min',\n      field: continuousFieldName,\n      as: (isMinMax ? 'lower_whisker_' : 'min_') + continuousFieldName\n    },\n    {\n      op: 'max',\n      field: continuousFieldName,\n      as: (isMinMax ? 'upper_whisker_' : 'max_') + continuousFieldName\n    }\n  ];\n\n  const postAggregateCalculates: CalculateTransform[] = isMinMax\n    ? []\n    : [\n        {\n          calculate: `datum.upper_box_${continuousFieldName} - datum.lower_box_${continuousFieldName}`,\n          as: 'iqr_' + continuousFieldName\n        },\n        {\n          calculate: `min(datum.upper_box_${continuousFieldName} + datum.iqr_${continuousFieldName} * ${extent}, datum.max_${continuousFieldName})`,\n          as: 'upper_whisker_' + continuousFieldName\n        },\n        {\n          calculate: `max(datum.lower_box_${continuousFieldName} - datum.iqr_${continuousFieldName} * ${extent}, datum.min_${continuousFieldName})`,\n          as: 'lower_whisker_' + continuousFieldName\n        }\n      ];\n\n  const {[continuousAxis]: oldContinuousAxisChannelDef, ...oldEncodingWithoutContinuousAxis} = spec.encoding;\n\n  const {bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis} = extractTransformsFromEncoding(\n    oldEncodingWithoutContinuousAxis,\n    config\n  );\n\n  const ticksOrient: Orient = orient === 'vertical' ? 'horizontal' : 'vertical';\n\n  const tooltipSummary: CompositeMarkTooltipSummary[] = [\n    {fieldPrefix: 'upper_whisker_', titlePrefix: isMinMax ? 'Max' : 'Upper Whisker'},\n    {fieldPrefix: 'upper_box_', titlePrefix: 'Q3'},\n    {fieldPrefix: 'mid_box_', titlePrefix: 'Median'},\n    {fieldPrefix: 'lower_box_', titlePrefix: 'Q1'},\n    {fieldPrefix: 'lower_whisker_', titlePrefix: isMinMax ? 'Min' : 'Lower Whisker'}\n  ];\n  const tooltipEncoding: Encoding<string> = getCompositeMarkTooltip(\n    tooltipSummary,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis\n  );\n\n  return {\n    transform: [\n      ...bins,\n      ...timeUnits,\n      {\n        aggregate: [...aggregate, ...boxplotSpecificAggregate],\n        groupby\n      },\n      ...postAggregateCalculates\n    ],\n    groupby,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    tooltipEncoding\n  };\n}\n"]}