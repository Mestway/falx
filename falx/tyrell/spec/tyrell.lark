start: type_decls program_decl func_decls inv_decls global_preds

type_decls: type_decl*

?type_decl: enum_decl
  | enum_set_decl
  | value_decl

enum_decl: "enum" type_name enum_body

enum_set_decl: "enumset" type_name "[" INT "]" enum_body

?enum_body: ";"
  | "{" enum_items "}"

enum_items: enum_item ("," enum_item)*

value_decl: "value" type_name value_body

?value_body: ";"
  | "{" value_items "}"

value_items: value_item value_item*

value_item: func_name ":" expr_type_name ";"

program_decl: "program" func_name "(" type_names ")" "->" type_name ";"

func_decls: func_decl*

inv_decls: inv_decl*

func_decl: "func" func_name ":" func_body func_constraints

inv_decl: "inv" func_name ":" func_body func_constraints

func_body: func_lhs "->" func_rhss

?func_lhs: opt_arg

func_rhss: func_rhs ("," func_rhs)*

?func_rhs: opt_arg

opt_arg: type_name [var_name]

?func_constraints: ";"
  | "{" func_constraint_items "}"

func_constraint_items: func_constraint_item func_constraint_item*

?func_constraint_item: expr ";"

?expr: cond_expr
  | imply_expr

?imply_expr: or_expr
  | or_expr "==>" imply_expr

?or_expr: and_expr
  | or_expr "||" and_expr

?and_expr: cmp_expr
  | and_expr "&&" cmp_expr

?cmp_expr: term_expr
  | cmp_expr cmp_op term_expr

?cmp_op: "==" -> expr_eq
  | "!=" -> expr_ne
  | "<" -> expr_lt
  | "<=" -> expr_le
  | ">" -> expr_gt
  | ">=" -> expr_ge

?term_expr: factor_expr
  | term_expr term_op factor_expr

?term_op: "+" -> expr_add
  | "-" -> expr_sub

?factor_expr: unary_expr
  | factor_expr factor_op unary_expr

?factor_op: "*" -> expr_mul
  | "/" -> expr_div
  | "%" -> expr_mod

?unary_expr: atom_expr
  | unary_op atom_expr

?unary_op: "-" -> expr_neg
  | "!" -> expr_not

?atom_expr: const_expr
  | var_expr
  | property_expr
  | "(" expr ")"

?const_expr: INT -> expr_intlit
  | "true" -> expr_true
  | "false" -> expr_false

?var_expr: var_name -> expr_var

?cond_expr: "if" imply_expr "then" imply_expr "else" imply_expr

?property_expr: func_name "(" var_expr ")"

type_names: [type_name ("," type_name)*]

global_preds: global_pred*

?global_pred: "predicate" pred_body ";"

pred_body: func_name "(" pred_args ")"

pred_args: [pred_arg ("," pred_arg)*]

pred_arg: var_name -> pred_var
  | SNUMBER -> pred_num
  | "false" -> pred_false
  | "true" -> pred_true
  | STRLIT -> pred_str

?enum_item: STRLIT
?expr_type_name: "bool" -> expr_bool
  | "int" -> expr_int

?type_name: NAME
?var_name: NAME
?func_name: NAME

COMMENT: "#" /.*/ "\n"
  | "(*" /(.|\n)+/ "*)"

%import common.ESCAPED_STRING -> STRLIT
%import common.CNAME -> NAME
%import common.INT -> INT
%import common.SIGNED_NUMBER -> SNUMBER
%import common.WS
%ignore WS
%ignore COMMENT