# First, specify the types that will be used
enum ColInt {
  "1", "2", "3"
}

enum SmallInt {
  "1", "2", "3"
}

enumset ColList[3] {
  "2", "3", "5"
}

enum Aggr {
  "min", "max", "sum"
}

enum NumFunc {
  "/"
}
enum BoolFunc {
  "==", ">", "<"
}

value Table {
	col: int;
	row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Morpheus(Table) -> Table;

# Finally, specify the production rules
func empty: Empty -> Empty;

func select: Table r -> Table a, ColList b {
  row(r) == row(a);
  col(r) < col(a);
}

func unite: Table r -> Table a, ColInt b, ColInt c {
  row(r) == row(a);
  col(r) == col(a) - 1;
}

func group_by: Table r -> Table a, ColList b {
  row(r) == row(a);
  col(r) == col(a);
}

func gather: Table r -> Table a, ColList b {
  row(r) >= row(a);
  col(r) <= col(a);
}

func spread: Table r -> Table a, ColInt b, ColInt c {
  row(r) <= row(a);
  col(r) >= col(a);
}

func separate: Table r -> Table a, ColInt b {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func mutate: Table r -> Table a, NumFunc b, ColInt c, ColInt d {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func filter: Table r -> Table a, BoolFunc b, ColInt c, SmallInt d {
  row(r) < row(a);
  col(r) == col(a);
}

func summarise: Table r -> Table a, Aggr b, ColInt c {
  row(r) < row(a);
  col(r) <= col(a) + 1;
}

func inner_join: Table r -> Table a, Table b {
  col(r) < col(a) + col(b);
}

predicate is_parent(spread, unite, 60);
predicate is_parent(unite, gather, 60);
predicate occurs(spread, 10);
predicate occurs(unite, 10);
predicate occurs(gather, 10);
