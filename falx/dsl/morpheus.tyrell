# First, specify the types that will be used
enum ColInt {
  "1","2","3","4","5","6"
}

enum SmallInt {
  "1", "2", "3"
}

enum SmallStr {
  "", "Archery", "Sophomores", "Vendor_1", "Sales Increase"
}

enumset ColList[3] {
  "1","2","3","4","5","6"
}

enumset ColList2[2] {
  "1","2","3","4","5","6"
}

enumset ColNegList[3] {
  "-1","-2","-3","-4","-5","-6"
}

enum Aggr {
  "mean", "sum", "n"
}

enum NumFunc {
  "+", "-"
}
enum BoolFunc {
  "!=", "=="
}

value Table {
	col: int;
	row: int;
  head: int;
  content: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Morpheus(Table) -> Table;

# Finally, specify the production rules
func empty: Empty -> Empty;

func select: Table r -> Table a, ColList b {
  row(r) == row(a);
  col(r) < col(a);
}

func unite: Table r -> Table a, ColInt b, ColInt c {
  row(r) == row(a);
  col(r) == col(a) - 1;
}

func gatherNeg: Table r -> Table a, ColNegList b {
  row(r) >= row(a);
  col(r) <= col(a);
}

func gather: Table r -> Table a, ColList b {
  row(r) >= row(a);
  col(r) <= col(a);
}

func spread: Table r -> Table a, ColInt b, ColInt c {
  row(r) <= row(a);
  col(r) >= col(a);
}

func separate: Table r -> Table a, ColInt b {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func mutate: Table r -> Table a, NumFunc b, ColInt c, ColInt d {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func mutateCustom: Table r -> Table a, BoolFunc b, ColInt c, SmallStr d {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func filter: Table r -> Table a, BoolFunc b, ColInt c, SmallStr d {
  row(r) < row(a);
  col(r) == col(a);
}

func groupSum: Table r -> Table a, Aggr b, ColInt c, ColList2 d {
  row(r) < row(a);
  col(r) <= col(a) + 1;
}

func inner_join: Table r -> Table a, Table b {
  col(r) < col(a) + col(b);
}

func cumsum: Table r -> Table a, ColInt b {
   row(r) == row(a);
   col(r) == col(a) + 1;
}
